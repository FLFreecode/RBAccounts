// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO  account(
  username,
  hashed_password,
  full_name,
  email,
  password_changed_at
  ) VALUES (
  $1, $2, $3, $4, $5
)RETURNING id, username, hashed_password, full_name, email, password_changed_at, created_at
`

type CreateAccountParams struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.PasswordChangedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccountEx = `-- name: DeleteAccountEx :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccountEx(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountEx, id)
	return err
}

const deleteAccountOne = `-- name: DeleteAccountOne :one
DELETE FROM account
WHERE id = $1
RETURNING id, username, hashed_password, full_name, email, password_changed_at, created_at
`

func (q *Queries) DeleteAccountOne(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccountOne, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, hashed_password, full_name, email, password_changed_at, created_at FROM account
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, hashed_password, full_name, email, password_changed_at, created_at FROM account
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountEmail = `-- name: UpdateAccountEmail :one
UPDATE account 
SET email=$2
WHERE id = $1
RETURNING id, username, hashed_password, full_name, email, password_changed_at, created_at
`

type UpdateAccountEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateAccountEmail(ctx context.Context, arg UpdateAccountEmailParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountEmail, arg.ID, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountFullName = `-- name: UpdateAccountFullName :one
UPDATE account 
SET full_name=$2
WHERE id = $1
RETURNING id, username, hashed_password, full_name, email, password_changed_at, created_at
`

type UpdateAccountFullNameParams struct {
	ID       int64  `json:"id"`
	FullName string `json:"full_name"`
}

func (q *Queries) UpdateAccountFullName(ctx context.Context, arg UpdateAccountFullNameParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountFullName, arg.ID, arg.FullName)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountHashedPassword = `-- name: UpdateAccountHashedPassword :one
UPDATE account 
SET hashed_password=$2
WHERE id = $1
RETURNING id, username, hashed_password, full_name, email, password_changed_at, created_at
`

type UpdateAccountHashedPasswordParams struct {
	ID             int64  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateAccountHashedPassword(ctx context.Context, arg UpdateAccountHashedPasswordParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountHashedPassword, arg.ID, arg.HashedPassword)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
